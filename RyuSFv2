// SPDX-License-Identifier: MIT
pragma solidity ^0.8.22;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

interface IERC20 {
    
    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

interface IERC20Metadata is IERC20 {
 
    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);
}

interface IERC20Errors {

    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);

    error ERC20InvalidSender(address sender);

    error ERC20InvalidReceiver(address receiver);

    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);

    error ERC20InvalidApprover(address approver);

    error ERC20InvalidSpender(address spender);
}

abstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {
    mapping(address account => uint256) private _balances;

    mapping(address account => mapping(address spender => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view virtual returns (string memory) {
        return _name;
    }

    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    function totalSupply() public view virtual returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 value) public virtual returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, value);
        return true;
    }

    function allowance(address owner, address spender) public view virtual returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 value) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, value);
        _transfer(from, to, value);
        return true;
    }

    function _transfer(address from, address to, uint256 value) internal {
        if (from == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        if (to == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(from, to, value);
    }

    function _update(address from, address to, uint256 value) internal virtual {
        if (from == address(0)) {
            // Overflow check required: The rest of the code assumes that totalSupply never overflows
            _totalSupply += value;
        } else {
            uint256 fromBalance = _balances[from];
            if (fromBalance < value) {
                revert ERC20InsufficientBalance(from, fromBalance, value);
            }
            unchecked {
                // Overflow not possible: value <= fromBalance <= totalSupply.
                _balances[from] = fromBalance - value;
            }
        }

        if (to == address(0)) {
            unchecked {
                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.
                _totalSupply -= value;
            }
        } else {
            unchecked {
                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.
                _balances[to] += value;
            }
        }

        emit Transfer(from, to, value);
    }

    function _mint(address account, uint256 value) internal {
        if (account == address(0)) {
            revert ERC20InvalidReceiver(address(0));
        }
        _update(address(0), account, value);
    }

    function _burn(address account, uint256 value) internal {
        if (account == address(0)) {
            revert ERC20InvalidSender(address(0));
        }
        _update(account, address(0), value);
    }

    function _approve(address owner, address spender, uint256 value) internal {
        _approve(owner, spender, value, true);
    }

    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {
        if (owner == address(0)) {
            revert ERC20InvalidApprover(address(0));
        }
        if (spender == address(0)) {
            revert ERC20InvalidSpender(address(0));
        }
        _allowances[owner][spender] = value;
        if (emitEvent) {
            emit Approval(owner, spender, value);
        }
    }

    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            if (currentAllowance < value) {
                revert ERC20InsufficientAllowance(spender, currentAllowance, value);
            }
            unchecked {
                _approve(owner, spender, currentAllowance - value, false);
            }
        }
    }
}

interface IERC721Errors {

    error ERC721InvalidOwner(address owner);

    error ERC721NonexistentToken(uint256 tokenId);

    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);

    error ERC721InvalidSender(address sender);

    error ERC721InvalidReceiver(address receiver);

    error ERC721InsufficientApproval(address operator, uint256 tokenId);

    error ERC721InvalidApprover(address approver);

    error ERC721InvalidOperator(address operator);
}

interface IERC1155Errors {
 
    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);

    error ERC1155InvalidSender(address sender);

    error ERC1155InvalidReceiver(address receiver);

    error ERC1155MissingApprovalForAll(address operator, address owner);

    error ERC1155InvalidApprover(address approver);

    error ERC1155InvalidOperator(address operator);

    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
}

contract Ownable {
    address public owner;
    address public originalOwner;
    uint256 public relinquishTime;
    bool public canRecover;
    
    constructor() {
        owner = msg.sender;
        originalOwner = msg.sender;
        canRecover = false;
        
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    modifier onlyOriginalOwner() {
        require(msg.sender == originalOwner, "Only the original owner can call this function.");
        _;
    }

    function renounceOwnership() public onlyOwner {
        relinquishTime = block.timestamp + (1 minutes); // 1 minute renounce
        owner = address(0);
        canRecover = true;
    }

    function renounceNoOwnership() public onlyOriginalOwner {
        require(canRecover, "Cannot recover ownership yet.");
        require(block.timestamp >= relinquishTime, "Cannot recover ownership yet.");
        owner = originalOwner;
        relinquishTime = 0; // Relinquish time to zero
        canRecover = false;
    }  
}

abstract contract ReentrancyGuard {
    
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
       
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

       
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        
        _status = NOT_ENTERED;
    }

    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}

contract RYUSF is ERC20, IERC721Errors, IERC1155Errors, Ownable, ReentrancyGuard  {

    address public feeWalletM; //Wallet Marketing
    address public feeWalletD; //Wallet Developer
    address public feeWalletL; //Wallet Liquidez (Manual)
    mapping(address => bool) public isTaxless;
    uint256 public transferFeeM; //Fee Marketing
    uint256 public transferFeeD; //Fee Developer
    uint256 public transferFeeL; //Fee Liquidez

    uint256 public maxTransactionAmount; //Fee maximo por usuario

    mapping(address => uint256) public amountValue; //Almacena cuanto transfirio una wallet, para tener registro

    constructor(
        //address initialOwner,
        address _feeWalletM,
        address _feeWalletD,
        address _feeWalletL,
        uint256 _transferFeeM,
        uint256 _transferFeeD,
        uint256 _transferFeeL,
        uint256 _maxTransactionAmount
    )
        ERC20("RYUSF", "RSF")
        Ownable() 
    {
        _mint(address(this), 21000000 * (10 ** uint256(decimals())));
        _approve(address(this), msg.sender, totalSupply());
        _transfer(address(this), msg.sender, totalSupply());

        feeWalletM = _feeWalletM;
        feeWalletD = _feeWalletD;
        feeWalletL = _feeWalletL;
        transferFeeM = _transferFeeM;
        transferFeeD = _transferFeeD;
        transferFeeL = _transferFeeL;
        maxTransactionAmount = _maxTransactionAmount;

        isTaxless[_feeWalletM] = true;
        isTaxless[_feeWalletD] = true;
        isTaxless[_feeWalletL] = true;
    }

    // Sobrescribe la función transfer de ERC20
    function transfer(address to, uint256 value) public override(ERC20) nonReentrant returns (bool) {
        // Comprueba si la transacción excede el límite máximo
     
        require(amountValue[msg.sender] + value <= maxTransactionAmount, "Exceeds max transaction amount");
         amountValue[msg.sender] += value;
        // Calcula la comisión
       if (!isTaxless[msg.sender]) {
            uint256 feeAmountM = (value * transferFeeM) / 100;
            uint256 feeAmountD = (value * transferFeeD) / 100;
            uint256 feeAmountL = (value * transferFeeL) / 100;

            // Transfiere la comisión a la wallet de la comisión
            _transfer(msg.sender, feeWalletM, feeAmountM);
            _transfer(msg.sender, feeWalletD, feeAmountD);
            _transfer(msg.sender, feeWalletL, feeAmountL);

            // Transfiere el valor neto después de la comisión
            value = value - feeAmountM - feeAmountD - feeAmountL;
        }

        // Llama a la función transfer de la clase base ERC20
        bool success = super.transfer(to, value);
        return success; 
    }

}
